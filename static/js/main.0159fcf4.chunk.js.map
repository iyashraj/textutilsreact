{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","homeText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","backgroundColor","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","navigator","clipboard","writeText","split","join","length","trimEnd","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","propType","PropTypes","string","aboutText","defaultProps","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0159fcf4.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">{props.homeText}</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n              <div className={`form-check form-switch text-${props.mode === 'light'? 'dark':'white'}`}>\r\n                    <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n              </div>\r\n\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propType= {title: PropTypes.string,\r\n                  homeText: PropTypes.string,\r\n                  aboutText: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    homeText: 'Name your page',\r\n    aboutText: 'About Text here'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n        // console.log(\"Uppercase was clicked: \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        // console.log(\"Hey! i am copied text.\");\r\n        var text= document.getElementById(\"myBox\");\r\n        // text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Clipboard Copid!\", \"success\");\r\n        \r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Spaces are removed!\", \"success\");\r\n    }\r\n\r\n    const handleLowClick = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase!\", \"success\");\r\n\r\n    }\r\n    const handleClearClick = () =>{\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"TextBox cleared!\", \"success\");\r\n\r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"OnChange\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n    const [text, setText] = useState(\"\");   //Syntax of State\r\n    // text = \"New Text\";           // Wrong way to change the state\r\n    // setText(\"New Text Here\");     //Correct way to change the state \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                 <textarea className=\"form-control\" style={{backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : 'black'}} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2 my-2\"  onClick={handleUpClick} >Convert to Uppercase</button>\r\n            <button className=\"btn btn-danger mx-2 my-2\"  onClick={handleLowClick} >Convert to Lowercase</button>\r\n            <button className=\"btn btn-success mx-2 my-2\"  onClick={handleClearClick} >Clear Text</button>\r\n            <button className=\"btn btn-warning mx-2 my-2\"  onClick={handleCopy} >Copy Text</button>\r\n            <button className=\"btn btn-info mx-2 my-2\"  onClick={handleExtraSpaces} >Remove Extra Spaces</button>\r\n\r\n\r\n        </div>\r\n        <div className=\"container my-2\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n            <h1>Your Test Summary</h1>\r\n            <p>{text.length>0 ? text.trimEnd().split(/\\s+/).length:0} words, {text.length} charaters.</p>\r\n            <p>{0.008 * text.trimEnd().split(\" \").length} minutes read.</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here.\"}</p>\r\n            {/* <p>{text.length>0 ? text.trimEnd().split(\" \").length:0}</p> */}\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const  lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n           props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n                 {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n            </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert'\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");  //wheather dark mode is enable or not.\n  const [alert, setAlert] = useState(null);\n  \n  const showAlert = (message, type) =>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout( ()=>{\n          setAlert(null);\n      },1500)\n  }\n\n  const toggleMode = ()=>{ \n    if(mode === \"light\"){\n      setMode(\"dark\")\n      document.body.style.backgroundColor = '#042743'\n      showAlert(\"Dark mode has been enabled\", \"success\");\n\n    }else{\n      setMode(\"light\")\n      document.body.style.backgroundColor = 'white'\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n}\n\n  return (\n   <>\n   {/* <Router> */}\n     <Navbar title=\"TextUtils\" homeText='Home' aboutText='About' mode={mode} toggleMode={toggleMode}/>\n     <Alert alert={alert}/>\n     <div className=\"container my-3\">\n     {/* <Switch> */}\n       {/* /users --> Component 1\n       /users/home --> Component 2 */}\n\n          {/* <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n             <TextForm showAlert={showAlert} heading=\"Enter your text to analyze.\" mode={mode} />\n          {/* </Route> */}\n        {/* </Switch> */}\n      {/* <About/> */}\n\n     </div>\n   {/* </Router> */}\n\n   </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}